version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
    steps:
      - run:
          name: Destroy Environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
    # Add parameter here
    steps:
      - run:
          name: Revert Migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build Frontend
          command: |
            cd frontend
            npm install
            npm run format
            npm run build
      - save_cache:
          key: frontend-build
          paths:
            - src/node_modules

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Build
          command: |
            cd backend
            npm install
            npm run format
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Test Frontend
          command: |
            cd frontend 
            npm install 
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Test Backend
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Scan Frontend
          command: |
            cd frontend 
            npm install
            npm run lint

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm install
            npm run lint

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli # Docker image here that supports AWS CLI
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              #--tags project=your-tag \
              # --stack-name "your back-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              #--tags project=your-tag \
              # --stack-name "your front-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              exit 1
      - run:
          name: Add Backend IP To Ansible Inventory
          command: |
            # Your code here
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11 # Docker image here that supports Ansible
    steps:
      - checkout
      
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install Dependencies
          command: |
            # Your code here
            exit 1
      - run:
          name: Configure Server
          command: |
            # Your code here
            exit 1
      # Here's where you will add some code to rollback on failure

  run-migrations:
    docker:
      - image: circleci/node:13.8.0 # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - run:
          name: Run Migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send Migration Results to Memstash
          command: |
            # Your code here
            exit 1
      # Here's where you will add some code to rollback on failure

  deploy-frontend:
    docker:
      - image: amazon/aws-cli # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Install Dependencies
          command: |
            # your code here
      - run:
          name: Get Backend URL
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy Frontend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11 # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install Dependencies
          command: |
            # your code here
      - run:
          name: Deploy Backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  smoke-test:
    docker:
      - image: alpine:latest  # Lightweight Docker image
    steps:
      # Checkout code from git
      - run:
          name: Install Dependencies
          command: |
            # your code here
      - run:
          name: Get Backend URL
          command: |
            # your code here
      - run:
          name: Backend Smoke Test.
          command: |
            # your code here
      - run:
          name: Frontend Smoke Test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  cloudfront-update:
    docker:
      - image: amazon/aws-cli # Docker image here that supports AWS CLI 
    steps:
      # Checkout code from git
      - run:
          name: Install Dependencies
          command: |
            # your code here
      - run:
          name: Update Cloudfront Distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  cleanup:
      docker:
        - image: alpine:latest # Docker image here
      steps:
        # Checkout code from git
        - run:
            name: Get Old Stack Workflow-ID
            command: |
              # your code here
              export OldWorkflowID="the id here"
              export STACKS=[] #put the list of stacks here
        - run:
            name: Remove Old Stacks and Files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
              fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
