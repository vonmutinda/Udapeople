version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Delete Bucket Files
          when: on_fail
          command: |
            if aws s3api head-bucket --bucket udapeople-maxwell-mutinda-<< parameters.Workflow_ID >>
              then
                aws s3 rm s3://udapeople-maxwell-mutinda-<< parameters.Workflow_ID >>/ --recursive
              else
                echo "Bucket empty or doesn't exist"
            fi
      - run:
          name: Destroy Environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>

  install-ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install ansible -y

  install-aws-cli:
    description: Install AWS CLI
    steps:
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install-nodejs:
    description: Install Nodejs v13.x
    steps:
      - run:
          name: Install Nodejs v13.x
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

  install-ssh:
    description: Install OpenSSH Server
    steps:
      - run:
          name: Install OpenSSH
          command: |
            sudo apt update
            sudo apt install openssh-server

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert Migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/SxXy3EGmZ1JErv5jhxou7h/migration_<< parameters.Workflow_ID >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build Frontend
          command: |
            cd frontend
            npm install
            npm run format
            npm run build
      - save_cache:
          key: frontend-build
          paths:
            - src/node_modules

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Build
          command: |
            cd backend
            npm install
            npm run format
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Test Frontend
          command: |
            cd frontend 
            npm install 
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Test Backend
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Scan Frontend
          command: |
            cd frontend 
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Scan Backend
          command: |
            cd backend 
            npm install  
            npm audit fix --force --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli # Docker image here that supports AWS CLI
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure cloudfront exists
          command: |
            if aws cloudformation wait stack-exists --stack-name udapeople-cloudfront-maxwell-mutinda
            then
              echo "Cloudfront udapeople-cloudfront-maxwell-mutinda Distribution Exists"
            else
              aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name udapeople-cloudfront-maxwell-mutinda \
                --parameter-overrides WorkflowID=udapeople-cloudfront-mxwll-mtnd
            fi
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add Backend IP To Ansible Inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-aws-cli
      - install-ansible
      - add_ssh_keys:
          fingerprints: ["b2:c6:60:5e:5c:43:64:16:7e:3e:89:62:d6:f1:f4:59"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - install-aws-cli
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send Migration Results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt;
            then
              curl --insecure https://kvdb.io/SxXy3EGmZ1JErv5jhxou7h/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - install-aws-cli
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install Dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get Backend URL
          command: |
            UDAPEOPLE_BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://${UDAPEOPLE_BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy Frontend Objects
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-maxwell-mutinda-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-ansible
      - install-aws-cli
      - install-nodejs
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["b2:c6:60:5e:5c:43:64:16:7e:3e:89:62:d6:f1:f4:59"]
      - run:
          name: Install Dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Bundle Artifact
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy Backend
          command: | 
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            echo "Contents  of inventory.txt file:"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-aws-cli
      - run:
          name: Backend Smoke Test.
          command: |
            UDAPEOPLE_BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            export UDAPEOPLE_BACKEND_API_URL=http://${UDAPEOPLE_BACKEND_IP}:3030 
            echo "Backend API URL: ${UDAPEOPLE_BACKEND_API_URL}"

            if curl -s ${UDAPEOPLE_BACKEND_API_URL}/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend Smoke Test.
          command: |
            UDAPEOPLE_FRONTEND_URL="http://udapeople-maxwell-mutinda-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo "Frontend URL: ${UDAPEOPLE_FRONTEND_URL}"

            if curl -s ${UDAPEOPLE_FRONTEND_URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi

      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-aws-cli
      - run:
          name: Cache Old WorkflowID Using kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports \
              --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate \
              --output text)
            echo "Old WokflowID: ${OLD_WORKFLOW_ID}"
            curl --insecure https://kvdb.io/SxXy3EGmZ1JErv5jhxou7h/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update Cloudfront Distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name udapeople-cloudfront-maxwell-mutinda \
            --parameter-overrides WorkflowID="udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

            echo "Old WorkflowID: ${OLD_WORKFLOW_ID}"
            echo "Current WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}"

      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-aws-cli
      - run:
          name: Get Old Stack WorkflowID
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"

            export OLD_WORKFLOW_ID=$(curl --insecure https://kvdb.io/SxXy3EGmZ1JErv5jhxou7h/old_workflow_id)
            echo "Old WorkflowID: ${OLD_WORKFLOW_ID}"
      - run:
          name: Remove Old Stacks and Files
          command: |
            echo Stack names: "${STACKS[@]}"
            echo "Old WorkflowID: ${OLD_WORKFLOW_ID}"

            if [[ "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID}" ]]
            then
              aws s3 rm "s3://udapeople-maxwell-mutinda-${OLD_WORKFLOW_ID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
            fi

      - destroy-environment
      - revert-migrations

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
